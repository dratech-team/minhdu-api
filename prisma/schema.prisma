generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

//generator dbml {
//  provider            = "prisma-dbml-generator"
//  output              = "../dbml"
//  outputName          = "minhdu.dbml"
//  projectName         = "Minh du"
//  projectDatabaseType = "PostgreSQL"
//  projectNote         = "Test project description"
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?
  role       Role
}

model Degree {
  id         Int           @id @default(autoincrement())
  school     String
  type       DegreeType
  startedAt  DateTime
  endedAt    DateTime
  major      String
  formality  FormalityType
  level      DegreeLevel?
  status     DegreeStatus
  note       String?
  employee   Employee      @relation(fields: [employeeId], references: [id])
  employeeId Int
}

model Bank {
  id         Int      @id @default(autoincrement())
  stk        String?
  owner      String
  name       String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
}

//Quốc gia
model Nation {
  id        Int        @id @default(autoincrement())
  code      String
  name      String
  provinces Province[]
}

model Province {
  id        Int        @id @default(autoincrement())
  code      String?
  name      String
  nation    Nation     @relation(fields: [nationId], references: [id])
  nationId  Int
  districts District[]
}

model District {
  id         Int      @id @default(autoincrement())
  code       String?
  name       String
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId Int
  wards      Ward[]
}

model Ward {
  id         Int        @id @default(autoincrement())
  code       String?
  name       String
  district   District   @relation(fields: [districtId], references: [id])
  districtId Int
  employees  Employee[]
  customers  Customer[]
  relatives  Relative[]
  orders     Order[]
}

model Branch {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  name        String
  departments Department[]
  Medicine    Medicine[]
  Material    Material[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  branch    Branch     @relation(fields: [branchId], references: [id])
  branchId  Int
  positions Position[]
  holiday   Holiday[]
}

model Position {
  id            Int                @id @default(autoincrement())
  name          String
  workday       Int
  department    Department         @relation(fields: [departmentId], references: [id])
  departmentId  Int
  employees     Employee[]
  workHistories WorkHistory[]
  templetes     OvertimeTemplate[]
}

// Hợp đồng
model Contract {
  id         Int          @id @default(autoincrement())
  contractId String?
  type       ContractType
  name       String
  position   String
  createdAt  DateTime
  expiredAt  DateTime
  employee   Employee     @relation(fields: [employeeId], references: [id])
  employeeId Int
}

model Employee {
  id              Int             @id @default(autoincrement())
  code            String          @unique
  firstName       String
  lastName        String
  avt             String?
  gender          GenderType
  phone           String
  workPhone       String?
  birthday        DateTime
  birthplace      String
  identify        String          @unique
  idCardAt        DateTime
  issuedBy        String
  ward            Ward            @relation(fields: [wardId], references: [id])
  wardId          Int
  address         String
  email           String?
  religion        String?
  ethnicity       String?
  mst             String?
  createdAt       DateTime //Ngày thử việc (vào làm)
  workedAt        DateTime? //Ngày làm chính thức
  leftAt          DateTime?
  isFlatSalary    Boolean
  position        Position        @relation(fields: [positionId], references: [id])
  positionId      Int
  note            String?
  facebook        String?
  zalo            String?
  banks           Bank[]
  account         Account?
  routes          Route[]
  salaries        Salary[]
  payrolls        Payroll[]
  contracts       Contract[]
  degrees         Degree[]
  workHistories   WorkHistory[]
  systemHistories SystemHistory[]
  relatives       Relative[]
  historySalaries SalaryHistory[]
}

model Holiday {
  id           Int        @id @default(autoincrement())
  name         String?
  datetime     DateTime
  rate         Float
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
}

model WorkHistory {
  id         Int       @id @default(autoincrement())
  position   Position  @relation(fields: [positionId], references: [id])
  positionId Int
  createdAt  DateTime? @default(now())
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId Int
}

model OvertimeTemplate {
  id         Int           @id @default(autoincrement())
  title      String
  type       SalaryType?   @default(OVERTIME)
  price      Float
  unit       DatetimeUnit? @default(HOUR)
  note       String?
  position   Position      @relation(fields: [positionId], references: [id])
  positionId Int
}

model Relative {
  id           Int              @id @default(autoincrement())
  firstName    String
  lastName     String
  gender       GenderType
  phone        String
  workPhone    String?
  birthday     DateTime
  birthplace   String
  identify     String?          @unique
  idCardAt     DateTime?
  issuedBy     String?
  ward         Ward             @relation(fields: [wardId], references: [id])
  wardId       Int
  address      String
  religion     String?
  ethnicity    String?
  mst          String?
  career       String
  relationship RelationshipType
  sos          Boolean?         @default(false)
  employee     Employee         @relation(fields: [employeeId], references: [id])
  employeeId   Int
}

model Customer {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  avt              String?
  gender           GenderType?
  phone            String
  workPhone        String?
  birthday         DateTime
  birthplace       String?
  identify         String?
  idCardAt         DateTime?
  issuedBy         String?
  ward             Ward?            @relation(fields: [wardId], references: [id])
  wardId           Int?
  address          String?
  email            String?
  religion         String?
  ethnicity        String?
  mst              String?
  type             CustomerType
  resource         CustomerResource
  isPotential      Boolean?         @default(false)
  note             String?
  orders           Order[]
  paymentHistories PaymentHistory[]
}

model PaymentHistory {
  id         Int           @id @default(autoincrement())
  paidAt     DateTime?     @default(now())
  currency   CurrencyUnit? @default(VND)
  payType    PaymentType?  @default(CASH)
  total      Float
  customer   Customer      @relation(fields: [customerId], references: [id])
  customerId Int
  note       String?
  order      Order?        @relation(fields: [orderId], references: [id])
  orderId    Int?
}

model Commodity {
  id      Int           @id @default(autoincrement())
  code    String
  name    String
  unit    CommodityUnit
  price   Float
  amount  Float
  gift    Float?        @default(0)
  more    Float         @default(0)
  order   Order?        @relation(fields: [orderId], references: [id])
  orderId Int?
}

model Order {
  id               Int              @id @default(autoincrement())
  customer         Customer         @relation(fields: [customerId], references: [id])
  customerId       Int
  createdAt        DateTime
  explain          String?
  routes           Route[]
  commodities      Commodity[]
  wardId           Int?
  deliveredAt      DateTime?
  destination      Ward?            @relation(fields: [wardId], references: [id])
  paymentHistories PaymentHistory[]
}

model Route {
  id         Int        @id @default(autoincrement())
  name       String
  startedAt  DateTime
  endedAt    DateTime?
  employee   Employee?  @relation(fields: [employeeId], references: [id])
  employeeId Int?
  driver     String?
  garage     String?
  orders     Order[]
  bsx        String
  locations  Location[]
}

model Location {
  id        Int    @id @default(autoincrement())
  latitude  String
  longitude String
  routes    Route  @relation(fields: [routeId], references: [id])
  routeId   Int
}

model Salary {
  id            Int            @id @default(autoincrement())
  title         String
  type          SalaryType
  times         Float?
  price         Float?
  unit          DatetimeUnit?  @default(DAY)
  rate          Float?         @default(1)
  datetime      DateTime?      @default(now())
  forgot        Boolean?       @default(false)
  note          String?
  employee      Employee?      @relation(fields: [employeeId], references: [id])
  employeeId    Int?
  historySalary SalaryHistory?
  payroll       Payroll?       @relation(fields: [payrollId], references: [id])
  payrollId     Int?
}

model Payroll {
  id             Int       @id @default(autoincrement())
  salaries       Salary[]
  employee       Employee  @relation(fields: [employeeId], references: [id])
  employeeId     Int
  accConfirmedAt DateTime?
  isEdit         Boolean?  @default(false)
  manConfirmedAt DateTime?
  paidAt         DateTime?
  createdAt      DateTime? @default(now())
}

model SalaryHistory {
  id         Int       @id @default(autoincrement())
  datetime   DateTime? @default(now())
  salary     Salary    @relation(fields: [salaryId], references: [id])
  salaryId   Int
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId Int

}
//start material
model Material {
  id        Int          @id @default(autoincrement())
  name      String
  provider  String?
  expire    DateTime
  price     Float // đơn giá trên 1 sp
  discount  Float?
  invoice   String?
  amount    Float
  createdAt DateTime?    @default(now()) // ngayf nhap kho
  branch    Branch?      @relation(fields: [branchId], references: [id]) // kho tong, kho con
  branchId  Int?
}
//end material

// start medicine

model Medicine {
  id        Int          @id @default(autoincrement())
  code      String
  barcode   String?
  name      String
  provider  String?
  expire    DateTime
  price     Float // đơn giá trên 1 sp
  discount  Float?
  invoice   String?
  unit      MedicineUnit
  amount    Float
  createdAt DateTime?    @default(now()) // ngayf nhap kho
  branch    Branch?      @relation(fields: [branchId], references: [id]) // kho tong, kho con
  branchId  Int?
}

enum MedicineUnit {
  VIEN
  LO
  LIT
  KG
  BI
}

// end medicine

model SystemHistory {
  id          Int          @id @default(autoincrement())
  appName     AppEnum
  employee    Employee     @relation(fields: [employeeId], references: [id])
  employeeId  Int
  createdAt   DateTime?    @default(now())
  object      String
  activity    ActivityType
  description String
  ip          String?
}

enum CurrencyUnit {
  VND
  USD
  EUR
  GBP
  MYR
  MMK
  CNY
  JPY
}

enum PaymentType {
  TRANSFER
  CASH
}

enum DegreeStatus {
  GRADUATED
  NOT_GRADUATED
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
}

enum AppEnum {
  HUMAN_RESOURCE
  BUSSINESS
}

enum RelationshipType {
  HUSBAND
  WIFE
  FATHER
  MOTHER
  DAUGHTER
  SON
}

enum CustomerType {
  RETAIL
  AGENCY
}

enum CommodityUnit {
  KG
  CON
}

enum CustomerResource {
  RESEARCH //nhân viên tự tìm
  INTRODUCED //Được giới thiệu
  SELF_FIND //khách hàng tự tìm đến
  OTHER //Khác
}

enum ContractType {
  LIMITED
  UNLIMITED
}

enum DegreeLevel {
  EXCELLENT
  GOOD
  AVERAGE
  BELOW_AVERAGE
}

enum DegreeType {
  UNIVERSITY //đại học
  COLLEGE //cao đẳng
  INTERMEDIATE //trung cấp
  MASTER //thạc sĩ
  PHILOSOPHY //tiến sĩ

}

enum FormalityType {
  FORMAL
  INFORMAL
  TRAINING
  REMOTE
}

enum SalaryType {
  BASIC_ISNURANCE
  BASIC
  STAY
  ALLOWANCE
  OVERTIME
  ABSENT
}

enum DatetimeUnit {
  MINUTE
  HOUR
  DAY
  MONTH
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  CHIEF_ACCOUNTANT
  ACCOUNTANT_CASH_FUND
  ACCOUNTANT_MODERATION
  SALESMAN
  SALESMAN_EGG
  IMPORTER_EXPORTER
  CONSTRUCTION_DEPARTMENT
  HUMAN_RESOURCE
  CAMP_ACCOUNTING
  CAMP_MANAGEMENT
  CAMP_DIRECTOR
  HATCHERY_ACCOUNTING
  HATCHERY_MANAGEMENT
  NONE
}
