generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//  provider            = "prisma-dbml-generator"
//  output              = "../dbml"
//  outputName          = "minhdu.dbml"
//  projectName         = "Minh du"
//  projectDatabaseType = "postgres"
//  projectNote         = "Test project description"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  role      Role?     @relation(fields: [roleId], references: [id])
  roleId    Int?
  managedBy RoleEnum?
  token     String?
  appName   AppEnum?
  loggedAt  DateTime? @default(now())
  ip        String?
  branches  Branch[]
  payrolls  Payroll[]
  timestamp DateTime? @default(now())
}

model Degree {
  id         Int           @id @default(autoincrement())
  school     String
  type       DegreeType
  startedAt  DateTime
  endedAt    DateTime
  major      String
  formality  FormalityType
  level      DegreeLevel?
  status     DegreeStatus
  note       String?
  employee   Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int
  timestamp  DateTime?     @default(now())
}

model Bank {
  id         Int       @id @default(autoincrement())
  stk        String?
  owner      String
  name       String
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int
  timestamp  DateTime? @default(now())
}

//Quốc gia
model Nation {
  id        Int        @id @default(autoincrement())
  code      String
  name      String
  provinces Province[]
}

model Province {
  id           Int        @id @default(autoincrement())
  code         Int        @unique
  codename     String     @unique
  divisionType String
  phoneCode    Int
  name         String
  nation       Nation     @relation(fields: [nationId], references: [id])
  nationId     Int
  districts    District[]
  customers    Customer[]
  orders       Order[]
}

model District {
  id           Int        @id @default(autoincrement())
  code         Int
  codename     String
  divisionType String
  name         String
  province     Province   @relation(fields: [provinceId], references: [id])
  provinceId   Int
  wards        Ward[]
  customers    Customer[]
  orders       Order[]
}

model Ward {
  id           Int        @id @default(autoincrement())
  code         Int
  codename     String
  divisionType String
  name         String
  district     District   @relation(fields: [districtId], references: [id])
  districtId   Int
  employees    Employee[]
  customers    Customer[]
  relatives    Relative[]
  orders       Order[]
}

model Branch {
  id                Int                @id @default(autoincrement())
  code              String?            @unique
  name              String             @unique
  recipe            RecipeType?
  address           String?
  timestamp         DateTime?          @default(now())
  employees         Employee[]
  overtimeTemplates OvertimeTemplate[]
  workHistories     WorkHistory[]
  Account           Account[]
  allowances        Salary[]
  positions         Position[]
  icubators         Incubator[]
  basicTemplates    BasicTemplate[]
  Category          Category[]
  status            BranchStatus[]
  phone             BranchPhone[]
  ioIReceipts       IoIReceipt[]
  salarySetting     SalarySetting?     @relation(fields: [salarySettingId], references: [id])
  salarySettingId   Int?
  allowancesv2      AllowanceBranch[]
}

model AllowanceBranch {
  id        Int       @id @default(autoincrement())
  title     String
  price     Float
  datetime  DateTime
  branch    Branch    @relation(fields: [branchId], references: [id])
  branchId  Int
  timestamp DateTime? @default(now())
}

model BranchStatus {
  id       Int     @id @default(autoincrement())
  app      AppEnum
  status   Boolean @default(true)
  branch   Branch  @relation(fields: [branchId], references: [id])
  branchId Int

  @@unique([app, branchId])
}

model BranchPhone {
  id       Int     @id @default(autoincrement())
  app      AppEnum
  phone    String
  branch   Branch? @relation(fields: [branchId], references: [id])
  branchId Int?

  @@unique([app, branchId])
}

model Position {
  id              Int                @id @default(autoincrement())
  name            String             @unique
  workday         Int?
  branches        Branch[]
  employees       Employee[]
  templates       OvertimeTemplate[]
  holidays        Holiday[]
  basicTemplates  BasicTemplate[]
  timestamp       DateTime?          @default(now())
  workHistories   WorkHistory[]
  salarySetting   SalarySetting?     @relation(fields: [salarySettingId], references: [id])
  salarySettingId Int?
}

// Hợp đồng
model Contract {
  id         Int           @id @default(autoincrement())
  contractId String?
  code String?
  type       ContractType? @default(LIMITED)
  name       String?
  position   String
  createdAt  DateTime
  expiredAt  DateTime?
  employee   Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int
  timestamp  DateTime?     @default(now())
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  app       String
  branch    Branch     @relation(fields: [branchId], references: [id])
  branchId  Int
  employees Employee[]
}

model Employee {
  id              Int             @id @default(autoincrement())
  code            String?         @unique
  firstName       String?
  lastName        String
  avt             String?
  gender          GenderType
  phone           String?
  workPhone       String?
  birthday        DateTime
  birthplace      String?
  identify        String?         @unique
  idCardAt        DateTime?
  issuedBy        String?
  workday         Int
  ward            Ward            @relation(fields: [wardId], references: [id])
  wardId          Int
  address         String
  email           String?
  religion        String?
  ethnicity       String?
  mst             String?
  createdAt       DateTime? //Ngày thử việc (vào làm)
  workedAt        DateTime? //Ngày làm chính thức
  leftAt          DateTime?
  isFlatSalary    Boolean?        @default(false)
  position        Position        @relation(fields: [positionId], references: [id])
  positionId      Int
  branch          Branch          @relation(fields: [branchId], references: [id])
  branchId        Int
  note            String?
  facebook        String?
  zalo            String?
  type            EmployeeType?   @default(FULL_TIME)
  recipeType      RecipeType?     @default(CT2)
  banks           Bank[]
  routes          Route[]
  payrolls        Payroll[]
  contracts       Contract[]
  degrees         Degree[]
  relatives       Relative[]
  salaryHistories SalaryHistory[]
  workHistories   WorkHistory[]
  timestamp       DateTime?       @default(now())
  category     Category?       @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  stt             Int?            @default(autoincrement())

  // @@unique([branchId, stt])
}

model Holiday {
  id           Int        @id @default(autoincrement())
  name         String?
  datetime     DateTime
  rate         Float?     @default(1)
  price        Float?
  // Nếu true là nó sẽ giới hạn bởi ngày làm thực tế + ngày lễ phải > ngày công chuẩn mới được nhân với hệ số ngày lễ. Nếu false thì dù có đi làm hay k thì vẫn được nhân hệ số
  // Hiện tại đang chỉ apply chi ngày tết
  isConstraint Boolean?   @default(true)
  positions    Position[]
  timestamp    DateTime?  @default(now())
}

model OvertimeTemplate {
  id           Int           @id @default(autoincrement())
  title        String
  type         SalaryType?   @default(OVERTIME)
  price        Float? // Nếu giá === null thì áp dụng đơn giá theo lương chuẩn
  rate         Float?        @default(1)
  unit         DatetimeUnit? @default(HOUR)
  note         String?
  positions    Position[]
  branches     Branch[]
  employeeType EmployeeType? @default(FULL_TIME)
  timestamp    DateTime?     @default(now())

  @@unique([title, type, price, rate, unit])
}

model BasicTemplate {
  id         Int           @id @default(autoincrement())
  title      String
  price      Float?
  type       SalaryType?   @default(BASIC)
  unit       DatetimeUnit?
  partialDay PartialDay?
  position   Position?     @relation(fields: [positionId], references: [id])
  positionId Int?
  branches   Branch[]
  timestamp  DateTime?     @default(now())

  @@unique([title, price])
}

model SalarySetting {
  id             Int              @id @default(autoincrement())
  title          String
  type           SalaryType
  rate           Float
  hasConstraints Boolean          @default(false) //  Hệ số được tính khi hasConstraints = false
  unit           DatetimeUnit
  prices         Float[]
  totalOf        SalaryType[]
  workday        Int?
  startedAt      DateTime?
  endedAt        DateTime?
  employeeType   EmployeeType
  branches       Branch[]
  positions      Position[]
  absents        AbsentSalary[]
  overtimes      OvertimeSalary[]
  holidays       HolidaySalary[]
  timestamp      DateTime?        @default(now())

  @@unique([title, type])
}

model RankSetting {
  id                Int                @id @default(autoincrement())
  from              Float
  to                Float
  rank              String
  yearBonusSettings YearBonusSetting[]
  timestamp         DateTime?          @default(now())
}

model YearBonusSetting {
  id            Int           @id @default(autoincrement())
  type          YearBonusType
  unit          YearBonusUnit
  rate          Float
  total         Float?
  rankSetting   RankSetting   @relation(fields: [rankSettingId], references: [id])
  rankSettingId Int
  diligent      String
  timestamp     DateTime?     @default(now())
}

model Relative {
  id           Int               @id @default(autoincrement())
  firstName    String?
  lastName     String
  gender       GenderType
  phone        String?
  workPhone    String?
  birthday     DateTime?
  birthplace   String?
  identify     String?           @unique
  idCardAt     DateTime?
  issuedBy     String?
  ward         Ward              @relation(fields: [wardId], references: [id])
  wardId       Int
  address      String?
  religion     String?
  ethnicity    String?
  mst          String?
  career       String?
  relationship RelationshipType?
  sos          Boolean?          @default(false)
  employee     Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId   Int
  timestamp    DateTime?         @default(now())
}

model Customer {
  id               Int               @id @default(autoincrement())
  firstName        String?
  lastName         String
  avt              String?
  gender           GenderType?
  phone            String
  workPhone        String?
  birthday         DateTime?
  birthplace       String?
  identify         String?
  idCardAt         DateTime?
  issuedBy         String?
  province         Province          @relation(fields: [provinceId], references: [id])
  provinceId       Int
  district         District?         @relation(fields: [districtId], references: [id])
  districtId       Int?
  ward             Ward?             @relation(fields: [wardId], references: [id])
  wardId           Int?
  address          String?
  email            String?
  religion         String?
  ethnicity        String?
  mst              String?
  type             CustomerType?
  resource         CustomerResource?
  isPotential      Boolean?          @default(false)
  note             String?
  debt             Float?            @default(0)
  orders           Order[]
  paymentHistories PaymentHistory[]
  timestamp        DateTime?         @default(now())
}

model PaymentHistory {
  id           Int           @id @default(autoincrement())
  total        Float
  paidAt       DateTime?     @default(now())
  currency     CurrencyUnit? @default(VND)
  payType      PaymentType?  @default(CASH)
  customer     Customer?     @relation(fields: [customerId], references: [id])
  customerId   Int?
  note         String?
  order        Order?        @relation(fields: [orderId], references: [id])
  orderId      Int?
  product      Product?      @relation(fields: [productId], references: [id])
  productId    Int?
  ioIReceipt   IoIReceipt?   @relation(fields: [ioIReceiptId], references: [id])
  ioIReceiptId Int?
}

model Commodity {
  id      Int           @id @default(autoincrement())
  code    String
  name    String
  unit    CommodityUnit
  price   Float?
  amount  Float
  gift    Float?        @default(0)
  more    Float?        @default(0)
  closed  Boolean?      @default(false)
  order   Order?        @relation(fields: [orderId], references: [id])
  orderId Int?
  route   Route?        @relation(fields: [routeId], references: [id])
  routeId Int?
}

model CommodityTemplate {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String
}

model Order {
  id               Int              @id @default(autoincrement())
  customer         Customer         @relation(fields: [customerId], references: [id])
  customerId       Int
  createdAt        DateTime //ngày tạo đơn hàng
  endedAt          DateTime? //ngày hẹn giao
  createdBy        String?
  explain          String?
  province         Province         @relation(fields: [provinceId], references: [id])
  provinceId       Int
  district         District?        @relation(fields: [districtId], references: [id])
  districtId       Int?
  ward             Ward?            @relation(fields: [wardId], references: [id])
  wardId           Int?
  deliveredAt      DateTime? // ngày giao thành công
  hide             Boolean?         @default(false)
  total            Float?
  canceledAt       DateTime?
  deleted          Boolean?         @default(false)
  timestamp        DateTime?        @default(now())
  note             String?
  orderHistories   OrderHistory[]
  routes           Route[]
  commodities      Commodity[]
  paymentHistories PaymentHistory[]
}

model OrderHistory {
  id        Int       @id @default(autoincrement())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   Int
  type      String
  note      String?
  timestamp DateTime? @default(now())
}

model Route {
  id          Int         @id @default(autoincrement())
  name        String
  startedAt   DateTime
  endedAt     DateTime?
  employee    Employee?   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  Int?
  driver      String?
  garage      String?
  bsx         String
  deleted     Boolean?    @default(false)
  timestamp   DateTime?   @default(now())
  orders      Order[]
  locations   Location[]
  commodities Commodity[]
}

model Location {
  id        Int    @id @default(autoincrement())
  latitude  String
  longitude String
  routes    Route  @relation(fields: [routeId], references: [id])
  routeId   Int
}

model Salary {
  id         Int           @id @default(autoincrement())
  title      String
  type       SalaryType
  times      Float?
  price      Float?
  unit       DatetimeUnit?
  rate       Float?        @default(1)
  datetime   DateTime?
  forgot     Boolean?      @default(false)
  partial    PartialDay?   @default(ALL_DAY)
  note       String?
  payroll    Payroll?      @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  payrollId  Int?
  branch     Branch?       @relation(fields: [branchId], references: [id])
  branchId   Int?
  salaryId   Int?
  allowance  Salary?       @relation("SalaryToAllowance", fields: [salaryId], references: [id])
  allowances Salary[]      @relation("SalaryToAllowance")
  timestamp  DateTime?     @default(now())
}

// dùng cho block basic, stay, holiday
model Salaryv2 {
  id        Int         @id @default(autoincrement())
  title     String
  type      SalaryType
  price     Float
  rate      Float?      @default(1)
  payroll   Payroll     @relation(fields: [payrollId], references: [id])
  payrollId Int
  block     SalaryBlock @relation(fields: [blockId], references: [id])
  blockId   Int
  note      String?
  timestamp DateTime?   @default(now())

  @@unique([title, type, price, payrollId])
}

model RemoteSalary {
  id        Int         @id @default(autoincrement())
  type      RemoteType
  startedAt DateTime
  endedAt   DateTime
  payroll   Payroll     @relation(fields: [payrollId], references: [id])
  payrollId Int
  block     SalaryBlock @relation(fields: [blockId], references: [id])
  blockId   Int
  partial   PartialDay
  note      String?
  timestamp DateTime?   @default(now())
}

model DeductionSalary {
  id        Int         @id @default(autoincrement())
  title     String
  price     Float
  payroll   Payroll     @relation(fields: [payrollId], references: [id])
  payrollId Int
  block     SalaryBlock @relation(fields: [blockId], references: [id])
  blockId   Int
  note      String?
  timestamp DateTime?   @default(now())
}

model AbsentSalary {
  id        Int           @id @default(autoincrement())
  title     String?
  partial   PartialDay
  startedAt DateTime
  endedAt   DateTime
  startTime DateTime
  endTime   DateTime
  setting   SalarySetting @relation(fields: [settingId], references: [id])
  settingId Int
  payroll   Payroll       @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  payrollId Int
  block     SalaryBlock   @relation(fields: [blockId], references: [id])
  blockId   Int
  note      String?
  timestamp DateTime?     @default(now())
}

model DayOffSalary {
  id        Int        @id @default(autoincrement())
  title     String
  startedAt DateTime
  endedAt   DateTime
  partial   PartialDay
  payroll   Payroll    @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  payrollId Int
  note      String?
  timestamp DateTime?  @default(now())
}

model OvertimeSalary {
  id         Int                       @id @default(autoincrement())
  startedAt  DateTime
  endedAt    DateTime
  startTime  DateTime?
  endTime    DateTime?
  partial    PartialDay
  setting    SalarySetting             @relation(fields: [settingId], references: [id])
  settingId  Int
  block      SalaryBlock               @relation(fields: [blockId], references: [id])
  blockId    Int
  payroll    Payroll                   @relation(fields: [payrollId], references: [id])
  payrollId  Int
  note       String?
  timestamp  DateTime?                 @default(now())
  allowances OvertimeAllowanceSalary[]

  @@unique([startedAt, endedAt, partial, settingId, payrollId])
}

model OvertimeAllowanceSalary {
  id         Int            @id @default(autoincrement())
  title      String
  price      Float
  overtime   OvertimeSalary @relation(fields: [overtimeId], references: [id], onDelete: Cascade)
  overtimeId Int
}

model AllowanceSalary {
  id        Int          @id @default(autoincrement())
  title     String
  price     Float
  inWorkday Boolean      @default(true) // Dựa vào ngày công thực tế
  inOffice  Boolean      @default(true) // Chỉ tính những ngày làm tại văn phòng. Không tính các ngày onsite/remote/wfh
  startedAt DateTime?
  endedAt   DateTime?
  unit      DatetimeUnit @default(DAY)
  rate      Float?       @default(1)
  payroll   Payroll      @relation(fields: [payrollId], references: [id])
  payrollId Int
  block     SalaryBlock? @relation(fields: [blockId], references: [id])
  blockId   Int?
  note      String?
  timestamp DateTime?    @default(now())
}

model HolidaySalary {
  id        Int           @id @default(autoincrement())
  setting   SalarySetting @relation(fields: [settingId], references: [id])
  settingId Int
  block     SalaryBlock   @relation(fields: [blockId], references: [id])
  blockId   Int
  payroll   Payroll       @relation(fields: [payrollId], references: [id])
  payrollId Int
  note      String?
  timestamp DateTime?     @default(now())

  @@unique([settingId, payrollId])
}

model SalaryHistory {
  id         Int       @id @default(autoincrement())
  title      String
  price      Float
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int
  createdAt  DateTime? @default(now())
  timestamp  DateTime? @default(now())
}

model WorkHistory {
  id         Int       @id @default(autoincrement())
  position   Position  @relation(fields: [positionId], references: [id])
  positionId Int
  branch     Branch    @relation(fields: [branchId], references: [id])
  branchId   Int
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int
  createdAt  DateTime? @default(now())
}

model Payroll {
  id             Int               @id @default(autoincrement())
  employee       Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId     Int
  accConfirmedAt DateTime?
  isEdit         Boolean?          @default(true)
  manConfirmedAt DateTime?
  paidAt         DateTime?
  workday        Float? // ngày công chuẩn
  actualday      Float? // Tổng số ngày làm thực tế
  absent         Float? // tổng số ngày vắng
  bsc            Float? // tổng số lần quên giấy phép / bsc
  branch         String
  position       String
  total          Float?
  isFlatSalary   Boolean?
  recipeType     RecipeType?
  note           String?
  tax            Float?
  taxed          Boolean?          @default(true)
  deletedAt      DateTime?
  deleteBy       String?
  createdAt      DateTime?         @default(now()) // ngay tao phieu luong, phieu luong cua thang
  timestamp      DateTime?         @default(now()) // ngay them vao ghi lai lich su
  salaries       Salary[]
  salariesv2     Salaryv2[]
  absents        AbsentSalary[]
  deductions     DeductionSalary[]
  remotes        RemoteSalary[]
  allowances     AllowanceSalary[]
  overtimes      OvertimeSalary[]
  dayoffs        DayOffSalary[]
  Account        Account?          @relation(fields: [accountId], references: [id])
  accountId      Int?
  holidays       HolidaySalary[]
}

model SalaryRecipe {
  id        Int           @id @default(autoincrement())
  title     String
  blocks    SalaryBlock[]
  timestamp DateTime?     @default(now())
}

model SalaryBlock {
  id            Int               @id @default(autoincrement())
  stt           Int
  title         String            @unique
  recipe        SalaryRecipe?     @relation(fields: [recipeId], references: [id])
  recipeId      Int?
  calculate     Calculation       @relation(fields: [calculationId], references: [id])
  calculationId Int
  timestamp     DateTime?         @default(now())
  salaries      Salaryv2[]
  remotes       RemoteSalary[]
  deductions    DeductionSalary[]
  absents       AbsentSalary[]
  overtimes     OvertimeSalary[]
  allowances    AllowanceSalary[]
  holidays      HolidaySalary[]

  @@unique([title, recipeId, calculationId])
}

// Cách tính tiền của 1 block
model Calculation {
  id        Int             @id @default(autoincrement())
  condition ConditionType // so sánh. Nếu = NO_CONDITION thì k cần so sánh với with
  with      Float? // với. Nếu có số thì so sánh với số, nếu null thì so sánh với ngày công chuẩn
  unit      DatetimeUnit // Được tính dựa vào. ví dụ DAY => (tổng / ngày công chuẩn) * ngày thực tế, MONTH (tổng / ngày công chuẩn) * ngày công chuẩn
  calculate CalculationType
  blocks    SalaryBlock[]
  timestamp DateTime?       @default(now())

  @@unique([condition, with, unit, calculate])
}

enum CalculationType {
  ADD
  SUB
  MUL
  DIV
}

enum ConditionType {
  LESS
  LESS_EQUAL
  GREATER
  GREATER_EQUAL
  EQUAL
  NOT_EQUAL
  NO_CONDITION
}

// warehouse

// loại kho văn phòng phẩm, thuốc, trứng...
model Warehouse {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  timestamp DateTime? @default(now())
}

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  timestamp DateTime? @default(now())
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  code        String?
  barcode     String?
  type        ProductType
  warehouse   Warehouse        @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  supplier    Supplier         @relation(fields: [supplierId], references: [id])
  supplierId  Int
  note        String?
  unit        ProductUnit
  timestamp   DateTime?        @default(now())
  ioIReceipts IoIReceipt[]
  payments    PaymentHistory[]
}

model IoIReceipt {
  id               Int              @id @default(autoincrement())
  type             StockType
  createdAt        DateTime?        @default(now())
  price            Float // Đơn giá
  amount           Float // số lượng
  accountedAt      DateTime? // ngày hạch toán
  billedAt         DateTime? // ngày chứng từ
  billCode         String? // số chứng từ 
  discount         Float?
  discountType     DiscountType?    @default(PERCENT)
  tax              Float?           @default(0)
  productId        Int
  product          Product          @relation(fields: [productId], references: [id])
  branch           Branch           @relation(fields: [branchId], references: [id])
  branchId         Int
  paymentHistories PaymentHistory[]
  orderedAt        DateTime?        @default(now())
  importedAt       DateTime?        @default(now())
  approvedAt       DateTime?        @default(now())
  completedAt      DateTime?        @default(now())
  consignments     Consignment[]
  note             String?
  attechments      Attachment[]
}

model Attachment {
  id           Int         @id @default(autoincrement())
  file         String
  ioIReceipt   IoIReceipt? @relation(fields: [ioIReceiptId], references: [id])
  ioIReceiptId Int?
}

// Lô hàng
model Consignment {
  id           Int        @id @default(autoincrement())
  code         String?
  mfg          DateTime // ngày sản xuất
  exp          DateTime // hạn sử dụng
  amount       Float
  createdAt    DateTime?  @default(now())
  ioIReceipt   IoIReceipt @relation(fields: [ioIReceiptId], references: [id])
  ioIReceiptId Int
}

model TemplateConsignment {
  id        Int       @id @default(autoincrement())
  code      String?
  mfg       DateTime // ngày sản xuất
  exp       DateTime // hạn sử dụng
  timestamp DateTime? @default(now())
}

model Incubator {
  id        Int       @id @default(autoincrement())
  branch    Branch    @relation(fields: [branchId], references: [id])
  branchId  Int
  eggs      Egg[]
  createdAt DateTime? @default(now())
  timestamp DateTime? @default(now())
}

model Egg {
  id          Int       @id @default(autoincrement())
  type        EggType   @relation(fields: [eggTypeId], references: [id])
  eggTypeId   Int       @unique
  incubator   Incubator @relation(fields: [incubatorId], references: [id])
  incubatorId Int
  amount      Int
  timestamp   DateTime? @default(now())
}

model EggType {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  rated Boolean? @default(true)
  stt   Int?
  added Boolean? @default(true) //được cộng vào tổng soi loại để chia
  eggs  Egg[]
}

model System {
  id       Int        @id @default(autoincrement())
  title    String
  type     SystemType
  datetime DateTime?  @default(now())
}

enum ProductType {
  HSD
  NORMAL
}

enum DiscountType {
  CASH
  PERCENT
}

enum StockType {
  IMPORT
  EXPORT
  MOVE
  INVENTORY
}

enum SystemType {
  EMPLOYEE
  PAYROLL
  TEMPLATE
  HISTORY
  ORG_CHART
}

model Role {
  id       Int       @id @default(autoincrement())
  name     String
  role     RoleEnum
  appName  AppEnum?
  accounts Account[]
}

enum PartialDay {
  MORNING
  AFTERNOON
  NIGHT
  ALL_DAY
}

//  CT1: apply cho công nhân trại chăn nuôi
//Điều kiện: Số ngày đi làm phải > số ngày công chuẩn. ( Nếu đi làm <= thì sẽ được tính lương bình thường)
// - sáp dụng cho công nhân trại chăn nuôi. Nếu đi làm trong ngày thường sẽ được tính lương x2.
// - Nếu đi làm trong ngày lễ thì sẽ được tính lương x3
// - Nếu ngày lễ nhưng đi làm nửa ngày và thoả mãn điều kiện thì sẽ được tính nửa ngày đi làm lương x3, và nửa ngày nghỉ trong ngày lễ sẽ được hưởng lương bình thường

enum RecipeType {
  CT1
  CT2
  CT3
  CT4
  CT5
}

enum EmployeeType {
  FULL_TIME
  SEASONAL
}

// end medicine

// start admin
model Application {
  id   Int     @id @default(autoincrement())
  name String
  app  AppEnum
  link String
  icon String
}

// end admin

model SystemHistory {
  id          Int       @id @default(autoincrement())
  appName     AppEnum
  name        String
  activity    String
  description String?
  ip          String?
  body        String?
  param       String?
  createdAt   DateTime? @default(now())
}

enum CurrencyUnit {
  VND
  USD
  EUR
  GBP
  MYR
  MMK
  CNY
  JPY
}

enum PaymentType {
  TRANSFER
  CASH
}

enum DegreeStatus {
  GRADUATED
  NOT_GRADUATED
}

enum ActivityType {
  UNKNOWN
  CREATE
  UPDATE
  PATCH
  FIND_ALL
  FIND_ONE
  DELETE
}

enum AppEnum {
  UNKNOWN
  HR
  SELL
  WAREHOUSE
  ADMIN
}

enum RelationshipType {
  HUSBAND
  WIFE
  FATHER
  MOTHER
  DAUGHTER
  SON
}

enum CustomerType {
  RETAIL
  AGENCY
}

enum CommodityUnit {
  KG
  CON
}

enum ProductUnit {
  LIT
  KG
  BAO
  VIEN
  ORTHER
}

enum CustomerResource {
  RESEARCH //nhân viên tự tìm
  INTRODUCED //Được giới thiệu
  SELF_FIND //khách hàng tự tìm đến
  OTHER //Khác
}

enum ContractType {
  LIMITED
  UNLIMITED
}

enum DegreeLevel {
  EXCELLENT
  GOOD
  AVERAGE
  BELOW_AVERAGE
}

enum DegreeType {
  UNIVERSITY //đại học
  COLLEGE //cao đẳng
  INTERMEDIATE //trung cấp
  MASTER //thạc sĩ
  PHILOSOPHY //tiến sĩ

}

enum FormalityType {
  FORMAL
  INFORMAL
  TRAINING
  REMOTE
}

enum RemoteType {
  WFH
  ONSITE
  REMOTE
}

enum SalaryType {
  BASIC
  BASIC_INSURANCE
  STAY
  ALLOWANCE // Phụ cấp thêm không ảnh hưởng tới ngày công
  OVERTIME //tăng ca, phụ cấp tăng ca
  ABSENT
  HOLIDAY // Ngày lế
  DAY_OFF // nghỉ được nghỉ
  PART_TIME // dùng cho nhân viên thời vụ (công nhật)
  DEDUCTION
  WFH
}

enum YearBonusType {
  MONTH
  PRICE
}

enum YearBonusUnit {
  MONTH
  HOUR
}

enum DatetimeUnit {
  MINUTE
  HOUR
  DAY
  MONTH
  TIMES
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum RoleEnum {
  SUPPER_ADMIN
  ADMIN
  CHIEF_ACCOUNTANT
  ACCOUNTANT_CASH_FUND // Quy tien mat
  ACCOUNTANT_MODERATION
  SALESMAN // ban hang
  SALESMAN_EGG // ban trung
  IMPORTER_EXPORTER // xuat nhap khau
  CONSTRUCTION_DEPARTMENT //cong trinh
  HUMAN_RESOURCE
  CAMP_ACCOUNTING // ke toan
  CAMP_MANAGER // quan ly trai
  CAMP_DIRECTOR //giam doc trai
  HATCHERY_ACCOUNTING // ke toan trai ap
  HATCHERY_MANAGEMENT // quan ly trai ap
  WAREHOUSE
  NONE // deo co chuc vu
}
